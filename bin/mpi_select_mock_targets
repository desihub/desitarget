#!/usr/bin/env python

"""
MPI equivalent of select_mock_targets
"""

#- Initialize MPI ASAP, then proceed
from __future__ import absolute_import, division, print_function
from mpi4py import MPI
comm = MPI.COMM_WORLD
rank = comm.Get_rank()
size = comm.Get_size()

import sys, os
import numpy as np
import argparse

from astropy.table import Table
import desimodel.footprint
from desiutil.log import get_logger, DEBUG
from desitarget.mock.build import targets_truth
import desitarget.mock.io as mockio

import multiprocessing
nproc = multiprocessing.cpu_count() // 2

parser = argparse.ArgumentParser()
parser.add_argument('-c', '--config', default='input.yaml')
parser.add_argument('-O', '--output_dir', help='Path to write the outputs', type=str, default='./')
parser.add_argument('-s', '--seed', help='Seed for random number generation', type=int, default=None)
parser.add_argument('-n', '--nproc', type=int, help='number of concurrent processes to use [{}]'.format(nproc), default=nproc)
parser.add_argument('--nside', help='Divide the DESI footprint into this healpix resolution', type=int, default=64)
parser.add_argument('--tiles', help='Path to file with tiles to cover', type=str)
parser.add_argument('--realtargets', '-r', help='Path to real target catalog', type=str)
parser.add_argument('-v','--verbose', action='store_true', help='Enable verbose output.')
parser.add_argument('--no-check-env', action='store_true', help="Don't check NERSC environment variables")
args = parser.parse_args()

if args.verbose:
    log = get_logger(DEBUG)
else:
    log = get_logger()

#- NERSC environment check
if 'NERSC_HOST' in os.environ and not args.no_check_env:
    ok = True
    if os.getenv('OMP_NUM_THREADS') not in ('1', '2'):
        ok = False
        if rank == 0:
            log.error('You likely want $OMP_NUM_THREADS=1 at NERSC')
    if os.getenv('MPICH_GNI_FORK_MODE') != 'FULLCOPY':
        ok = False
        if rank == 0:
            log.error('You likely want $MPICH_GNI_FORK_MODE=FULLCOPY at NERSC')
    if os.getenv('KMP_AFFINITY') != 'disabled':
        ok = False
        if rank == 0:
            log.error('You likely want $KMP_AFFINITY=disabled at NERSC')
    if not ok:
        if rank == 0:
            log.error('Either fix env or rerun with --no-check-env; exiting...')
        sys.exit(1)

#- Calculate which pixels cover these tiles and broadcast to all ranks
if rank == 0:
    if args.tiles.endswith('.ecsv'):
        tiles = Table.read(args.tiles, format='ascii.ecsv')
    else:
        tiles = Table.read(args.tiles)

    pixels = desimodel.footprint.tiles2pix(args.nside, tiles)
    keep = list()
    for i, pixnum in enumerate(pixels):
        truthspecfile = mockio.findfile('spectra_truth', args.nside, pixnum, basedir=args.output_dir)
        if not os.path.exists(truthspecfile):
            keep.append(i)

    log.info('{}/{} pixels covering {} tiles remaining to do'.format(len(keep), len(pixels), len(tiles)))
    pixels = pixels[keep]
else:
    pixels = None

comm.barrier()
pixels = comm.bcast(pixels, root=0)

#- Read config file and broadcast to all ranks
if rank == 0:
    import yaml
    with open(args.config, 'r') as pfile:
        params = yaml.load(pfile)
else:
    params = None

params = comm.bcast(params, root=0)

#- Split the pixels into groups for each rank
iedges = np.linspace(0, len(pixels), size+1, dtype=int)
rankpix = pixels[iedges[rank]:iedges[rank+1]]
log.info('rank {} processes {} pixels'.format(rank, iedges[rank+1]-iedges[rank]))
if len(rankpix) > 0:
    #- Process in groups of 4 to balance mock reading overhead
    #- vs. writing partial progress in case job times out
    n = 4
    for i in range(0, len(rankpix), n):
        targets_truth(params, args.output_dir, seed=args.seed, nside=args.nside,
                      nproc=args.nproc, verbose=args.verbose, clobber=True,
                      healpixels=rankpix[i:i+n])
